name: Check for new KiCad versions

on:
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch:

jobs:
  check-kicad-versions:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Fetch current KiCad versions from matrix
        id: repo_versions
        run: |
          awk '
            /matrix:/ {in_matrix=1}
            in_matrix && /kicad_version:/ {
              match($0, /\[.*\]/, arr)
              gsub(/["\[\] ]/, "", arr[0])
              gsub(/,/, "\n", arr[0])
              print arr[0]
              exit
            }
          ' .github/workflows/build-kicad-versions.yml > repo_versions.txt

          echo "Current KiCad versions in repo:"
          cat repo_versions.txt

      - name: Fetch Docker tags and filter
        id: docker_versions
        run: |
          curl -s "https://hub.docker.com/v2/repositories/kicad/kicad/tags?page_size=100" \
          | jq -r '.results[].name' \
          | grep -E '^[0-9]+\.[0-9]+(\.[0-9]+)?$' \
          | awk -F. '$1 >= 9' \
          | sort -Vr > docker_versions.txt

      - name: Compare versions and find new ones
        id: compare
        run: |
          missing=$(comm -23 <(sort docker_versions.txt) <(sort repo_versions.txt))

          if [ -n "$missing" ]; then
            formatted=$(echo "$missing" | awk '{ printf "\"%s\", ", $0 }' | sed 's/, $//')
            echo "$formatted" > missing_versions.txt
            echo "has_new_versions=true" >> $GITHUB_OUTPUT
          else
            echo "No new versions found."
            echo "has_new_versions=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub issue if new versions found
        if: steps.compare.outputs.has_new_versions == 'true'
        run: |
          title="New KiCad version(s) detected"
          body="New KiCad docker version(s) are available:<br>\`$(cat missing_versions.txt)\`<br><br>Please update the \`kicad_version\` array in \`.github/workflows/build-kicad-versions.yml\` accordingly."

          # Try to find an open issue with the same title
          issue_number=$(gh issue list --state open --search "$title" --json number,title | jq -r '.[] | select(.title == "'"$title"'") | .number')

          if [ -n "$issue_number" ]; then
            echo "Updating existing issue #$issue_number"
            gh issue edit "$issue_number" --body "$body"
          else
            echo "Creating new issue"
            gh issue create --title "$title" --body "$body" --label "update" --assignee Nick-v-L
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
